$(function () {    //拦截form,在form提交前进行验证    $('form').bind('submit', beforeSubmit);    //为带有valType属性的元素初始化提示信息并注册onblur事件    $.each($("[valType]"), function (i, n) {        $(n).poshytip({            className: 'tip-yellowsimple',            content: $(n).attr('msg'),            showOn: 'none',            alignTo: 'target',            alignX: 'right',            alignY: 'center',            offsetX: -101,            offsetY: 10        });        $(n).bind('blur', validateBefore);    });    //定义一个验证器    $.Validator = function (para) {    }    $.Validator.ajaxValidate = function () {        beforeSubmit();    }    //验证的方法    $.Validator.match = function (para) {        //定义默认的验证规则        var defaultVal = {            NUMBER: "^[0-9]*$",            TEL: "^0(10|2[0-5789]|\\d{3})-\\d{7,8}$",            IP: "^((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]|[*])\\.){3}(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]|[*])$",            MOBILE: "^1(3[0-9]|4[57]|5[0-35-9]|7[6-8]|8[0-9])\\d{8}$",            MAIL: "^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$",            IDENTITY: "((11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65|71|81|82|91)\\d{4})((((19|20)(([02468][048])|([13579][26]))0229))|((20[0-9][0-9])|(19[0-9][0-9]))((((0[1-9])|(1[0-2]))((0[1-9])|(1\\d)|(2[0-8])))|((((0[1,3-9])|(1[0-2]))(29|30))|(((0[13578])|(1[02]))31))))((\\d{3}(x|X))|(\\d{4}))",            CHINESE: "^([\u4E00-\uFA29]|[\uE7C7-\uE7F3])*$",            URL: "^http[s]?://[\\w\\.\\-]+$"        };        var flag = false;        if (para.rule == 'OTHER') {//自定义的验证规则匹配            flag = new RegExp(para.regString).test(para.data);        } else {            if (para.rule in defaultVal) {//默认的验证规则匹配                flag = new RegExp(defaultVal[para.rule]).test(para.data);            }        }        return flag;    }    //为jquery扩展一个doValidate方法，对所有带有valType的元素进行表单验证，可用于ajax提交前自动对表单进行验证    $.extend({        doValidate: function () {            return $.Validator.ajaxValidate();        }    });});//输入框焦点离开后对文本框的内容进行格式验证function validateBefore() {	//验证通过标识	var flag=true;	//获取验证类型	var valType=$(this).attr('valType');	//获取验证不通过时的提示信息	var msg=$(this).attr('msg');	//自定义的验证字符串	var regString;		if(valType=='OTHER') {//如果类型是自定义，则获取自定义的验证字符串		regString=$(this).attr('regString');		flag=$(this).val()!=''&&$.Validator.match({data:$(this).val(), rule:$(this).attr('valType'), regString:$(this).attr('regString')});    } else if (valType == 'VALIDATECODE') { //验证码        if ($.isFunction(getCheckProofUrl)) {            var rurl = getCheckProofUrl(); //验证码校验地址,get方式            if ($.trim(rurl) == "") {                flag = false;            } else {                var curObj = $(this)                $.get(rurl, {}, function (o) {                    if (typeof (o) != "undefined" && o == "true") {                        curObj.poshytip('hide');                        falg = true;                    } else {                        flag = false;                        curObj.poshytip('hide');                        if (!flag) {                            curObj.poshytip('show');                        }                    }                });                return;            }        } else {            flag = false;        }    }else {//如果类型不是自定义，则匹配默认的验证规则进行验证		if($(this).attr('valType')=='required') {//不能为空的判断			if($(this).val()=='') {				flag=false;            } else if ($.trim($(this).attr("realname")) != "") {                flag = (/^([\u4e00-\u9fa5]+)$/.test($(this).val()));                if (!flag) {                    $(this).poshytip('update', $(this).attr("realname"));                    $(this).poshytip('show');                }            }        } else if ($(this).attr('valType') == 'MOBILE') {            flag = $(this).val() != '' && $.Validator.match({ data: $(this).val(), rule: $(this).attr('valType') });            if (flag && $.trim($(this).attr("notcheck")) == "") { //判断是否已注册                var rurl = getCheckMobileUrl(); //验证码手机地址,get方式                if ($.trim(rurl) == "") {                    flag = false;                } else {                    var curObj = $(this);                    $.get(rurl, {}, function (o) {                        if (typeof (o) != "undefined" && o.toLowerCase() == "true") {                            curObj.poshytip('hide');                            falg = true;                        } else {                            flag = false;                            curObj.poshytip('hide');                            curObj.poshytip('update', curObj.attr("msg2"));                            if (!flag) {curObj.poshytip('show');}                        }                    });                    return ;                }            } else {                $(this).poshytip('hide');                $(this).poshytip('update', $(this).attr("msg"));                if (!flag) { $(this).poshytip('show');}                return;            }        }else {//已定义规则的判断			flag=$(this).val()!=''&&$.Validator.match({data:$(this).val(), rule:$(this).attr('valType')});		}	}	//先清除原来的tips	$(this).poshytip('hide');	//如果验证没有通过，显示tips	if(!flag) {$(this).poshytip('show');}}//submit之前对所有表单进行验证function beforeSubmit() {	var flag=true;	//alert($("[valType]").length);	$.each($("[valType],input[varType]"), function (i, n) {	    //清除可能已有的提示信息	    $(n).poshytip('hide');	    if ($(n).attr("valType") == 'required') {//对不能为空的文本框进行验证	        if ($(n).val() == '') {	            //显示tips				            $(n).poshytip('update', $(n).attr("msg"));	            $(n).poshytip('show');	            flag = false;	        } else if ($.trim($(n).attr("realname")) != "") {	            flag = (/^([\u4e00-\u9fa5]+)$/.test($(n).val()));	            if (!flag) {	                $(n).poshytip('update', $(n).attr("realname"));	                $(n).poshytip('show');	            }	        }	    } else if ($(n).attr("valType") == 'OTHER') {//对自定义的文本框进行验证	        if (!($(this).val() != '' && $.Validator.match({ data: $(this).val(), rule: $(this).attr('valType'), regString: $(this).attr('regString') }))) {	            $(n).poshytip('show');	            flag = false;	        }	    } else if ($(n).attr("valType") == 'VALIDATECODE') { //验证码	        var prevItemFlag = flag;	        if ($.isFunction(getCheckProofUrl)) {	            var rurl = getCheckProofUrl(); //验证码校验地址,get方式	            if ($.trim(rurl) == "") {	                flag = false;	            } else {	                var curObj = $(n)	                $.ajax({ url: rurl, type: "get", async: false, success: function (o) {	                    if (typeof (o) != "undefined" && o == "true") {	                        curObj.poshytip('hide');	                        falg = prevItemFlag && true;	                    } else {	                        flag = false;	                        //先清除原来的tips	                        curObj.poshytip('hide');	                        //如果验证没有通过，显示tips	                        if (!flag) {	                            curObj.poshytip('show');	                        }	                        //flag = false; 	                    }	                }	                });	                //return;	            }	        } else {	            $(n).poshytip('hide');	            $(this).poshytip('update', $(this).attr("msg"));	            if (!flag) { $(n).poshytip('show'); }	            //return flag	        }	    } else if ($(n).attr('valType') == 'MOBILE') {	        var prevItemFlag = flag;	        //if (flag) {	        flag = $(n).val() != '' && $.Validator.match({ data: $(n).val(), rule: $(n).attr('valType') });	        if (flag && $.trim($(this).attr("notcheck")) == "") { //判断是否已注册	            var rurl = getCheckMobileUrl(); //验证码手机地址,get方式	            if ($.trim(rurl) == "") {	                flag = false;	            } else {	                var curObj = $(n);	                $.ajax({ url: rurl, type: "get", async: false, success: function (o) {	                    if (typeof (o) != "undefined" && o.toLowerCase() == "true") {	                        curObj.poshytip('hide');	                        flag = prevItemFlag && true;	                    } else {	                        flag = false;	                        curObj.poshytip('hide');	                        curObj.poshytip('update', curObj.attr("msg2"));	                        if (!flag) { curObj.poshytip('show'); }	                    }	                }	                });	                //return flag;	            }	        } else {	            $(n).poshytip('hide');	            $(this).poshytip('update', $(this).attr("msg"));	            if (!flag) { $(n).poshytip('show'); }	            //return flag;	        }	    } else {//对使用已定义规则的文本框进行验证				        if (!($(this).val() != '' && $.Validator.match({ data: $(this).val(), rule: $(this).attr('valType') }))) {	            $(n).poshytip('show');	            flag = false;	        }	    }	});     return flag;}//下面是测试代码，不属于验证器的功能代码之内//用原型的方式来模拟js的类function Validators() {}Validators.prototype.subByJs=function(e) {	if($.doValidate()) {		alert('验证通过');		//todo	}}//function checkidcard(card) {//    card = card.toLowerCase();//    var vcity = { 11: "北京", 12: "天津", 13: "河北", 14: "山西", 15: "内蒙古", 21: "辽宁", 22: "吉林", 23: "黑龙江", 31: "上海", 32: "江苏", 33: "浙江", 34: "安徽", 35: "福建", 36: "江西", 37: "山东", 41: "河南", 42: "湖北", 43: "湖南", 44: "广东", 45: "广西", 46: "海南", 50: "重庆", 51: "四川", 52: "贵州", 53: "云南", 54: "西藏", 61: "陕西", 62: "甘肃", 63: "青海", 64: "宁夏", 65: "新疆", 71: "台湾", 81: "香港", 82: "澳门", 91: "国外" };//    var arrint = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);//    var arrch = new Array('1', '0', 'x', '9', '8', '7', '6', '5', '4', '3', '2');//    var reg = /(^\d{15}$)|(^\d{17}(\d|x)$)/;//    if (!reg.test(card)) return false;//    if (vcity[card.substr(0, 2)] == undefined) return false;//    var len = card.length;//    if (len == 15)//        reg = /^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/;//    else//        reg = /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|x)$/;//    var d, a = card.match(new RegExp(reg));//    if (!a) return false;//    if (len == 15) {//        d = new Date("19" + a[2] + "/" + a[3] + "/" + a[4]);//    } else {//        d = new Date(a[2] + "/" + a[3] + "/" + a[4]);//    }//    if (!(d.getFullYear() == a[2] && (d.getMonth() + 1) == a[3] && d.getDate() == a[4])) return false;//    if (len = 18) {//        len = 0;//        for (var i = 0; i < 17; i++) len += card.substr(i, 1) * arrint[i];//        return arrch[len % 11] == card.substr(17, 1);//    }//    return true;//};